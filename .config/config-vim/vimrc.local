" General {{{
" default is \
"let maplocalleader = '\'

" vim personalized quick reference file
nmap ,vh :vnew ~/.config/config-vim/vim.md<CR>

set textwidth=79
"set tabstop=4
"set shiftwidth=4
"
set splitright
let NERDTreeQuitOnOpen = 0

"vimdiff unfold everything in both windows
nmap \zR zR:wincmd W<CR>zR:wincmd W<CR>
" }}}
" Appearance {{{
" Set color column before the color scheme for the scheme color to take effect.
hi ColorColumn ctermbg=8
setlocal colorcolumn=80

" makes it easy to preview a tag in tagbar
set cursorline

colorscheme solarized
set background=light
call togglebg#map("<F2>")

" Indent Guides {{{
let g:indent_guides_enable_on_vim_startup = 1
"let indent_guides_guide_size = 1
"let g:indent_guides_auto_colors = 0

" See color values at https://github.com/altercation/vim-colors-solarized
" Override the indent guide highlight function
" to use colorscheme specific indentguide colors
function! indent_guides#basic_highlight_colors()
  try
      let l:colorscheme=g:colors_name
  catch /^Vim:E121/
      let l:colorscheme='default'
  endtry
  let l:cterm_colors = (&g:background == 'dark')
                        \ ? ((l:colorscheme == 'solarized')
                            \ ? ['black', 8]
                            \ : ((l:colorscheme == 'wombat256mod') ? [236, 235] : ['darkgrey', 'black']))
                        \ : ((l:colorscheme == 'wombat256mod') ? [236, 235] : ['lightgrey', 'white'])
  let l:gui_colors   = (&g:background == 'dark') ? ['grey15', 'grey30']  : ['grey70', 'grey85']

  exe 'hi IndentGuidesEven guibg=' . l:gui_colors[0] . ' guifg=' . l:gui_colors[1] . ' ctermbg=' . l:cterm_colors[0] . ' ctermfg=' . l:cterm_colors[1]
  exe 'hi IndentGuidesOdd  guibg=' . l:gui_colors[1] . ' guifg=' . l:gui_colors[0] . ' ctermbg=' . l:cterm_colors[1] . ' ctermfg=' . l:cterm_colors[0]
endfunction
" }}}
" }}}
" Conque Term {{{
" ctrl-w in insert mode
let g:ConqueTerm_CWInsert=1
"let g:ConqueTerm_InsertOnEnter=1
let g:ConqueTerm_Color=2
let g:ConqueTerm_StartMessages=0
let g:ConqueTerm_ReadUnfocused=1

" }}}
" Snippets {{{
" Trigger configuration. Do not use <tab> if you use
" https://github.com/Valloric/YouCompleteMe.
" let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsExpandTrigger="<c-y>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"
"
" If you want :UltiSnipsEdit to split your window.
" let g:UltiSnipsEditSplit="vertical"

" emmet plugin currentl disabled
"let g:user_emmet_install_global = 0
"autocmd FileType html,css EmmetInstall

" }}}
" Tags {{{
" Open tagbar automatically
" autocmd VimEnter * nested :call tagbar#autoopen(1)
let g:tagbar_left = 1

" }}}
" Web development {{{

" Javascript completion
" make it portable - need to have the path in vimpath
let g:tern#command=['/opt/local/bin/tern']
let g:tern_map_keys=1
autocmd FileType javascript setlocal omnifunc=tern#Complete

" Formatting
autocmd FileType javascript noremap <buffer>  <c-f> :call JsBeautify()<cr>
autocmd FileType html noremap <buffer> <c-f> :call HtmlBeautify()<cr>
autocmd FileType css noremap <buffer> <c-f> :call CSSBeautify()<cr>

" }}}
" Haskell {{{
" For hasktags use . as part of the keyword
" Modules have . as part of the keyword e.g. Data.List
" But qualified imports will not work e.g. Map.elem will not search elem
autocmd FileType haskell set iskeyword=a-z,A-Z,_,.,39,<,>,*,$,#
autocmd FileType haskell set formatoptions+=tcro
autocmd FileType haskell set formatoptions-=l
autocmd FileType haskell set ts=4
autocmd FileType haskell set sw=4

" Disable concealplus
autocmd FileType haskell set conceallevel=0

" TODO - ghci on the current file
" TODO - ghci with only the imports of current file's
nnoremap ,gh :ConqueTermVSplit stack exec ghci<CR>
nnoremap ,ghl :call conque_term#get_instance().writeln(':load '.expand('%'))<CR>

"For neco-ghc to work with YCM
" This makes vim hang for a while when a . is inserted. Disabling for now.
"let g:ycm_semantic_triggers = {'haskell' : ['.']}

" }}}
" Python {{{
"let g:pymode_rope_completion = 0
" }}}
" Markdown {{{
"markdown
autocmd BufNewFile,BufReadPost *.md set filetype=markdown
let g:markdown_fenced_languages = ['html', 'python', 'bash=sh']

" }}}
